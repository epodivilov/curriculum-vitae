---
import type { Language } from "@locales/index";
import { ChevronDown } from "lucide-astro";

export interface Props {
  currentLang: Language;
  class?: string;
}

const { currentLang, class: className = "" } = Astro.props;

const languages = [
  { code: "en" as Language, name: "English", flag: "🇺🇸", path: "/" },
  { code: "ru" as Language, name: "Русский", flag: "🇷🇺", path: "/ru/" },
  { code: "pt" as Language, name: "Português", flag: "🇵🇹", path: "/pt/" },
];

const currentLanguage = languages.find((lang) => lang.code === currentLang);
const basePath = Astro.url.pathname
  .replace(/\/(en|ru|pt)/, "")
  .replace(/\/$/, "");
---

<div class={`relative inline-block ${className}`}>
  <button
    id="language-button"
    class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-slate-600 rounded-lg bg-white dark:bg-slate-800 text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-slate-900 transition-colors"
    aria-haspopup="true"
    aria-expanded="false"
  >
    <span class="mr-2">{currentLanguage?.flag}</span>
    <span class="mr-2">{currentLanguage?.name}</span>
    <ChevronDown class="w-4 h-4 text-gray-400" />
  </button>

  <div
    id="language-menu"
    class="hidden absolute right-0 mt-2 w-48 bg-white dark:bg-slate-800 border border-gray-200 dark:border-slate-600 rounded-lg shadow-lg z-50"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-button"
  >
    <div class="py-1" role="none">
      {
        languages.map((language) => (
          <a
            href={`${basePath}/${language.path}`}
            class={`flex items-center px-4 py-2 text-sm transition-colors ${
              language.code === currentLang
                ? "bg-blue-50 dark:bg-blue-900 text-blue-700 dark:text-blue-200 font-medium"
                : "text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-slate-700"
            }`}
            role="menuitem"
          >
            <span class="mr-3">{language.flag}</span>
            <span>{language.name}</span>
          </a>
        ))
      }
    </div>
  </div>
</div>

<script>
  function initLanguageSwitcher() {
    const button = document.getElementById("language-button");
    const menu = document.getElementById("language-menu");

    if (!button || !menu) return;

    button.addEventListener("click", () => {
      const isOpen = menu.classList.contains("hidden");

      if (isOpen) {
        menu.classList.remove("hidden");
        button.setAttribute("aria-expanded", "true");
      } else {
        menu.classList.add("hidden");
        button.setAttribute("aria-expanded", "false");
      }
    });

    // Close menu when clicking outside
    document.addEventListener("click", (event) => {
      if (
        !button.contains(event.target as Node) &&
        !menu.contains(event.target as Node)
      ) {
        menu.classList.add("hidden");
        button.setAttribute("aria-expanded", "false");
      }
    });

    // Close menu on escape key
    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape") {
        menu.classList.add("hidden");
        button.setAttribute("aria-expanded", "false");
      }
    });
  }

  // Initialize on page load
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initLanguageSwitcher);
  } else {
    initLanguageSwitcher();
  }
</script>

<style>
  @media print {
    div {
      display: none !important;
    }
  }
</style>
